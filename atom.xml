<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wanli&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wanlizhu.github.io/"/>
  <updated>2018-12-30T17:35:10.416Z</updated>
  <id>http://wanlizhu.github.io/</id>
  
  <author>
    <name>Wanli Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++内存对象模型</title>
    <link href="http://wanlizhu.github.io/2018/12/31/C-%E5%86%85%E5%AD%98%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
    <id>http://wanlizhu.github.io/2018/12/31/C-内存对象模型/</id>
    <published>2018-12-30T16:01:46.000Z</published>
    <updated>2018-12-30T17:35:10.416Z</updated>
    
    <content type="html"><![CDATA[<p>在C++对象模型下，nonstatic 数据成员被置于每一个类对象中，而static数据成员被置于类对象之外。static与nonstatic函数也都放在类对象之外，而<strong>对于virtual 函数，则通过虚函数表+虚指针来支持</strong>：</p><ul><li>每个类生成一个表格，称为虚表（virtual table，简称vtbl）。虚表中存放着一堆指针，这些指针指向该类每一个虚函数。<strong>虚表中的函数地址将按声明时的顺序排列</strong></li><li>每个类对象都拥有一个虚表指针(vptr)，由编译器为其生成。<strong>虚表指针的设定与重置皆由类的复制控制（也即是构造函数、析构函数、赋值操作符）来完成</strong>。vptr的位置为编译器决定，传统上它被放在所有显示声明的成员之后，不过现在许多编译器把vptr放在一个类对象的最前端（也就是说对象的地址就是vptr的地址）</li><li><strong>虚函数表的前面设置了一个指向type_info的指针，用以支持RTTI</strong>（Run Time Type Identification，运行时类型识别）。RTTI是为多态而生成的信息，包括对象继承关系，对象本身的描述等，只有具有虚函数的对象在会生成。</li></ul><p><img src="/2018/12/31/C-内存对象模型/model.png" alt="C++对象模型"></p><h2><span id="1-非虚继承">1 非虚继承</span></h2><h3><span id="11-非虚继承的单继承">1.1 （非虚继承的）单继承</span></h3><p><strong>注：派生类中新增的虚函数追加到虚函数表后面</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span><br>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base (<span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>):base(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun0</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derive</span>:</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Derive (<span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>):derive(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun0</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; derive &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> derive;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2018/12/31/C-内存对象模型/含虚函数的单继承.png" alt="含虚函数的单继承"></p><h3><span id="12-非虚继承的多继承">1.2 （非虚继承的）多继承</span></h3><p><strong>注：派生类中新增的虚函数，追加到<font color="red">第一个</font>基类的虚函数表的后面</strong></p><figure class="highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span><br>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base1 (<span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>):base1(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base1 &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base1;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base2</span><br>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base2 (<span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>):base2(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base2 &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base2;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derive</span>:</span> <span class="hljs-keyword">public</span> Base1, <span class="hljs-keyword">public</span> Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Derive (<span class="hljs-keyword">int</span> value = <span class="hljs-number">4</span>):derive (value)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; derive &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> derive;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2018/12/31/C-内存对象模型/含虚函数的多继承.png" alt="含虚函数的多继承"></p><h3><span id="13-非虚继承的菱形继承">1.3 （非虚继承的）菱形继承</span></h3><p><strong>注：分析时，由上到下依次分析。<font color="red">存在二义性和内存冗余问题</font></strong></p><figure class="highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span><br>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base (<span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>):base(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun0</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span>:</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Base1 (<span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>):base1(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base1 &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base1;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base2</span>:</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Base2 (<span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>):base2(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base2 &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base2;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derive</span>:</span> <span class="hljs-keyword">public</span> Base1, <span class="hljs-keyword">public</span> Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Derive (<span class="hljs-keyword">int</span> value = <span class="hljs-number">4</span>):derive (value)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; derive &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> derive;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2018/12/31/C-内存对象模型/含虚函数的菱形继承.png" alt="含虚函数的菱形继承"></p><h2><span id="2-虚继承">2 虚继承</span></h2><h3><span id="21-单继承">2.1 单继承</span></h3><p><strong>与普通的包含虚函数的单继承相比，派生类拥有自己的虚函数表以及虚函数表指针，而不是与基类共用一个虚函数表。注意虚函数表指针和虚基类表指针的存储顺序</strong></p><figure class="highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span><br>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base (<span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>):base(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun0</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span>:</span><span class="hljs-keyword">virtual</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Base1 (<span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>):base1(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base1 &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base1;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2018/12/31/C-内存对象模型/含虚函数的单虚继承.png" alt="含虚函数的单虚继承"></p><p>下图是<strong>不包含虚函数</strong>的虚单继承：</p><p><img src="/2018/12/31/C-内存对象模型/无虚函数的单虚继承.png" alt="无虚函数的单虚继承"></p><h3><span id="22-多继承">2.2 多继承</span></h3><figure class="highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span><br>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base1 (<span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>):base1(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base1 &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base1;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base2</span><br>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base2 (<span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>):base2(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base2 &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base2;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derive</span>:</span><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base1, <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Derive (<span class="hljs-keyword">int</span> value = <span class="hljs-number">4</span>):derive (value)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; derive &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> derive;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2018/12/31/C-内存对象模型/含虚函数的虚多继承.png" alt="含虚函数的虚多继承"></p><p>下图是<strong>不包含虚函数</strong>的虚多继承：</p><p><img src="/2018/12/31/C-内存对象模型/无虚函数的虚多继承.png" alt="含虚函数的虚多继承"></p><h3><span id="23-菱形继承">2.3 菱形继承</span></h3><figure class="highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span><br>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base (<span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>):base(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun0</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span>:</span><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Base1 (<span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>):base1(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base1 &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base1;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base2</span>:</span><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Base2 (<span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>):base2(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base2 &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> base2;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derive</span>:</span>  <span class="hljs-keyword">public</span> Base1, <span class="hljs-keyword">public</span> Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    Derive (<span class="hljs-keyword">int</span> value = <span class="hljs-number">4</span>):derive (value)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; derive &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<br>    <span class="hljs-keyword">int</span> derive;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2018/12/31/C-内存对象模型/含虚函数的虚菱形继承.png" alt="含虚函数的虚菱形继承"></p><p>下图是<strong>不包含虚函数</strong>的虚菱形继承（类型1 - <strong>中虚</strong>）：</p><p><img src="/2018/12/31/C-内存对象模型/无虚函数的虚菱形继承-中虚.png" alt="无虚函数的虚菱形继承"></p><p>下图是<strong>不包含虚函数</strong>的虚菱形继承（类型1 - <strong>全虚</strong>）：</p><p><img src="/2018/12/31/C-内存对象模型/无虚函数的虚菱形继承-全虚.png" alt="无虚函数的虚菱形继承"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在C++对象模型下，nonstatic 数据成员被置于每一个类对象中，而static数据成员被置于类对象之外。static与nonstatic函数也都放在类对象之外，而&lt;strong&gt;对于virtual 函数，则通过虚函数表+虚指针来支持&lt;/strong&gt;：&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
      <category term="C++" scheme="http://wanlizhu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://wanlizhu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>German for English Speakers</title>
    <link href="http://wanlizhu.github.io/2018/12/26/german-for-english-speakers/"/>
    <id>http://wanlizhu.github.io/2018/12/26/german-for-english-speakers/</id>
    <published>2018-12-25T16:25:02.000Z</published>
    <updated>2018-12-29T09:15:19.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#basics">BASICS</a><ul><li><a href="#the-german-alphabet">The German Alphabet</a><ul><li><a href="#special-pronunciations">Special pronunciations</a></li><li><a href="#germanic-umlaut">Germanic Umlaut</a></li><li><a href="#when-to-write-ss-and-when-to-use-ß">When to write ss and when to use ß?</a></li><li><a href="#typing-german-characters-on-non-german-keyboards">Typing German characters on non-German keyboards</a></li></ul></li><li><a href="#pronunciation-consonants">Pronunciation: Consonants</a></li><li><a href="#pronunciation-vowels">Pronunciation: Vowels</a></li></ul></li></ul><!-- tocstop --><p><strong>The refinement of the site of Peter Lewis, Click <a href="http://germanforenglishspeakers.com/" target="_blank" rel="noopener">here</a> to browse</strong></p><a id="more"></a><h1><span id="basics">BASICS</span></h1><h2><span id="the-german-alphabet">The German Alphabet</span></h2><h3><span id="special-pronunciations">Special pronunciations</span></h3><p>There are 4 special pronunciations (<strong>ä, ö, ü, ß</strong>) in German alphabet, but they aren’t really part of the full-fledged letters, because they’re not in the alphabet song that German children learn, they don’t have their own sections in a dictionary, and they don’t occur at the beginning of many common words. </p><p>The capital <strong>ẞ</strong> was declared an official letter of the German alphabet on 29 June 2017, and <strong>ß</strong> is not a real letter, just a <a href="http://en.wikipedia.org/wiki/Typographic_ligature" target="_blank" rel="noopener">ligature</a> for (or stylized way of writing) a double lowercase <strong>s</strong>. </p><h3><span id="germanic-umlaut">Germanic Umlaut</span></h3><p>The original purpose of a Germanic umlaut was to shift from a “back vowel” to a “front vowel” to <strong>make a “derivative form” of a word easier to pronounce (1)</strong>, usually because it was adding another syllable. For example, <strong>alt</strong> (old) &rarr; <strong>älter</strong> (older). </p><p>Words that don’t follow the rule <strong>(1)</strong>, as above, appear in modern German because:</p><ul><li>extra syllable has been dropped, as in many noun plurals.</li><li>the root form has fallen out of use.</li><li>they’re been used to approximate a foreign pronunciation, like <strong>militär</strong>.</li><li>more complex reasons, e.g. <strong>für</strong> comes from <strong>vor</strong>, but even native speakers don’t usually think of them as related.</li></ul><p>The more you can <strong>visualize the umlaut forms of a word as “shifted”</strong> rather than as a whole separate word, the easier it will be to remember them.</p><h3><span id="when-to-write-ss-and-when-to-use-ß">When to write ss and when to use ß?</span></h3><p>The rules for this have changed in recent years, but the current practice is to <strong>use ss after short vowels, and ß after long vowels and diphthongs</strong> (vowel combinations). But if you’re ever in doubt, write <strong>ss</strong>. It’s more acceptable to replace a ß with a double s than the other way around. There is no difference in how they’re pronounced. <strong>In Switzerland the ß is not used at all</strong>.</p><h3><span id="typing-german-characters-on-non-german-keyboards">Typing German characters on non-German keyboards</span></h3><p>If you’re using a keyboard without these symbols, you can type <strong>ae</strong>, <strong>oe</strong> and <strong>ue</strong> instead of ä, ö and ü, and of course <strong>ss</strong> instead of ß:</p><ul><li>On Mac: For <strong>ä</strong>, <strong>ö</strong>, <strong>ü</strong>, type <strong>Option-U</strong> (tells Mac to add Umlaut), then type <strong>a</strong>, <strong>o</strong>, <strong>u</strong>. For <strong>ß</strong>, type <strong>Option-S</strong>.</li><li>On Windows: To be honest, the whole process on Windows is so annoying that most users who have to type any serious amount of German text will be better off just switching their keyboard layout. Click <a href="http://support.microsoft.com/kb/258824" target="_blank" rel="noopener">here</a> for instructions on how to switch your keyboard layout in Windows.</li></ul><h2><span id="pronunciation-consonants">Pronunciation: Consonants</span></h2><ul><li><strong>b, d, g</strong> : are softened to <strong>p, t, k</strong>, <em>at the end of a syllable</em>.</li><li><strong>j</strong> : like the English <strong>y</strong>.</li><li><strong>kn, pf, ps</strong> : just get ready to say a <strong>p</strong> with your lips closed, and say the second letter instead, letting it force them open a bit.</li><li><strong>v</strong> : like the English <strong>f</strong>.</li><li><strong>w</strong> : like the English <strong>v</strong>.</li><li><strong>z</strong> : is pronounced like <strong>ts</strong>.</li><li><strong>qu</strong> : is pronounced like <strong>kv</strong>.</li><li><p><strong>s</strong> : like the English <strong>z</strong>. however, </p><ul><li>like the <strong>s</strong> in English, <em>before another consonant</em>.</li><li><strong>sp-, st-</strong> : is pronounced like <strong>shp-, sht-</strong>, <em>at the beginning of a syllabel</em>.</li><li><strong>ss</strong> : like English <strong>ss</strong>.</li></ul><p>The most difficult sounds in German are <strong>R</strong> and <strong>CH</strong>. They come in multiple varieties:</p><ul><li><strong>r at the end</strong> : like the English <strong>uh</strong> (e.g. <strong>der</strong> sounds like <strong>day-uh</strong>), pronounced very weakly.</li><li><strong>r at the beginning</strong> : is pronounced at the back of the throat.</li><li><strong>hard ch</strong> : after <strong>a, o, u, au</strong> (e.g. <strong>auch</strong>, <strong>doch</strong>, <strong>ach</strong>).</li></ul></li><li><strong>soft ch</strong> : after <strong>any other vowel</strong> (e.g. <strong>ich</strong>, <strong>dich</strong>), or at the beginning of a few words (<strong>China</strong>, <strong>Chemie</strong>).</li><li><strong>greek ch</strong> : is identical to a <strong>k</strong> sound (e.g. <strong>chaos</strong>, <strong>charakter</strong>, <strong>sechs</strong>).</li><li><strong>foreign ch</strong> : keep their original ch sounds.</li></ul><h2><span id="pronunciation-vowels">Pronunciation: Vowels</span></h2><p><img src="/2018/12/26/german-for-english-speakers/german-vowels.png" alt="German Vowels"></p><p><strong>These are eight standard German vowels</strong> – the same five as in English (a, i, e, o, u) plus the three umlaut vowels ä, ö and ü – and they each have a “long” and a “short” variant. </p><p>Vowels are marked as long by <strong>being doubled</strong>, like in <strong>Staat</strong> (state), or by <strong>adding an h</strong> after a vowel, like in <strong>Stahl</strong> (steel).</p><p>In general, <strong>a vowel is long when followed by a single consonant and short when followed by a combination of consonants</strong>. There are some exceptions to this rule, but they mainly involve unstressed syllables and short grammatical words (e.g. <strong>in, das, von</strong>). </p><p>Also keep in mind that <strong>most German syllables that begin with a vowel are led off by a glottal stop</strong>. An example of a glottal stop is the break in the middle of “uh-oh” – or, for British readers, the way Cockney speakers swallow their <strong>T</strong>s. </p><ul><li><strong>a</strong> : <strong>a</strong> in the English <strong>father</strong>.</li><li><strong>ä</strong> : <strong>a</strong> in the British English <strong>hair</strong>.</li><li><strong>e</strong> : <strong>a</strong> in the English <strong>day</strong>.</li><li><strong>i</strong> : <strong>ee</strong> in the English <strong>team, meet</strong>.</li><li><strong>o</strong> : <strong>o</strong> in the English <strong>no</strong>.</li><li><strong>ö</strong> : <strong>o</strong> in the English <strong>worst, worry</strong>.</li><li><strong>u</strong> : <strong>oo</strong> in the English <strong>moon</strong>.</li><li><strong>ü</strong> : the same with Chinese Pinyin.</li><li>The other basic vowels sounds are as follows:<ul><li><strong>y</strong> : long <strong>ü</strong>, (e.g. <strong>typisch</strong>), <em>in words of Greek origin</em>.</li><li><strong>e</strong> : unstressed <strong>uh</strong>, (e.g. <strong>bitte</strong>), <em>at the end of a word</em>.</li><li><strong>ie</strong> : long <strong>i</strong>, (and unstressed <strong>yeh</strong> <em>at the end of a word</em>).</li><li><strong>au</strong> : <strong>ow</strong> in the English <strong>cow</strong>.</li><li><strong>äu &amp; eu</strong> : <strong>oy</strong> in the English <strong>toy</strong>.</li><li><strong>ei, ey, &amp; ai</strong> : <strong>i</strong> in the English <strong>fight</strong>.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#basics&quot;&gt;BASICS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-german-alphabet&quot;&gt;The German Alphabet&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#special-pronunciations&quot;&gt;Special pronunciations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#germanic-umlaut&quot;&gt;Germanic Umlaut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#when-to-write-ss-and-when-to-use-ß&quot;&gt;When to write ss and when to use ß?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#typing-german-characters-on-non-german-keyboards&quot;&gt;Typing German characters on non-German keyboards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pronunciation-consonants&quot;&gt;Pronunciation: Consonants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pronunciation-vowels&quot;&gt;Pronunciation: Vowels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;p&gt;&lt;strong&gt;The refinement of the site of Peter Lewis, Click &lt;a href=&quot;http://germanforenglishspeakers.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt; to browse&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="German" scheme="http://wanlizhu.github.io/categories/German/"/>
    
    
      <category term="German" scheme="http://wanlizhu.github.io/tags/German/"/>
    
  </entry>
  
  <entry>
    <title>5 Reasons to Learn German</title>
    <link href="http://wanlizhu.github.io/2018/12/25/5-reasons-to-learn-german/"/>
    <id>http://wanlizhu.github.io/2018/12/25/5-reasons-to-learn-german/</id>
    <published>2018-12-25T14:19:41.000Z</published>
    <updated>2018-12-30T15:44:04.393Z</updated>
    
    <content type="html"><![CDATA[<p>If you’re thinking about learning a new language, German could well make an excellent choice. It may not leap to mind as an exciting language to have in your arsenal, but hear us out… While German doesn’t have the romantic allure of French, or be considered a business asset like Chinese, the language wins hands down once you start considering its other strengths.</p><p>If you’re worried we going to say you should learn German because 120 million native speakers worldwide, fear not. Below, we’ve covered the five most interesting reasons why German should take pride of place on your skills list.</p><a id="more"></a><p><strong>1. German has an enormous cultural heritage</strong></p><p>There’s no getting away from the fact that a large percentage of the world’s most impressive achievements were first conceived of in the German language.</p><p>Everything from music to science and literature to opera has deep roots in this rich and flexible language. Musically, German can lay claim to most of the classical greats, including Beethoven, Bach, Handel, Mozart and Brahms. Vienna, the capital of Austria and a German-speaking city through and through, has long been considered the world’s musical heart.</p><p>On the science front, there’s the most famous scientist ever to live, Einstein, but also contemporary scientists who are making huge contributions to our current lives. For example, a German was recently responsible for discovering the newest elements on the Periodic Table.</p><p>You’ll never run out of books to read in German, particularly if you like your literature deep and philosophical: Goethe, the Brothers Grimm, Hermann Hesse, Ernst Jünger and Patrick Süskind are just a few names to get you started.</p><p><strong>2. German is a very distinctive language</strong></p><p>Although there are several languages that have Germanic roots, none are quite as distinctive as German itself. One of the main reasons for this is the language’s common use of extremely long compound words. Today, the longest of these is ‘rindfleischetikettierungsüberwachungsaufgabenübertragungsgesetz’, an impressive 64 characters long - which translates into English as “beef labelling supervision duty assignment law”. (If you’re wondering, ‘Rind fleisch’ means beef flesh, ‘etikettierungs’ means labelling, ‘Überwachungs’ means supervision, ‘aufgaben’ means duties, ‘Übertragung’ means assignment and ‘gesetz’ means law). Try slipping that into conversation!</p><p>German is a living language, and as one of the only languages in the world that allows such outrageously lengthy compound words, it’s anybody’s guess as to what the next contender for the dubiously honorable title of Longest German Word might be.</p><p><strong>3. German is beating everyone else online</strong></p><p>The Internet has a lot to offer the fluent German speaker. After the .com domain, those websites ending with .de (the German equivalent of .co.uk) are the most populous. In fact, since .com doesn’t really ‘belong’ to one country (although it’s obviously the token domain of America), that makes Germany the country with the largest number of national domains.</p><p>Just imagine what you’d be able to find on the 8.1 million new domains suddenly available to you! To give you an idea of just how far ahead .de is, its closest competitor is .co.uk with a paltry 31,900,000 websites to call its own. Furthermore, German domain names are also more popular than .net, .org, and .info extensions.</p><p><strong>4. It’s a breeze to learn</strong></p><p>Well, maybe not a breeze, but for the English speaker, German is often surprisingly easy to master. This is because the two languages have the same Germanic roots. In comparison, French, Italian and Spanish are known as the Romance languages and function very differently to English, making them much harder to learn.</p><p><a href="http://how-to-learn-any-language.com/e/languages/similarities/german/index.html" target="_blank" rel="noopener">This interesting table</a> suggests that 40% of German words are similar to their English sounding counterparts. So, for example, ‘bruder’ and ‘vater’, which mean brother and father, are much more recognizable than the French equivalents of ‘père’ and ‘frère’.</p><p>While we’re on the subject of learning languages, mastering German will also improve your English. According to the American Association of Teachers of German, “vocabulary skills in English, a better understanding of the English language itself, improved literacy, higher reading achievement as well as enhanced listening skills and memory have been shown to correlate with German language study”.</p><p><strong>5. You’ll always have someone to speak to</strong></p><p>German speakers are some of the most well-traveled people in the world. Wherever you go, you’ll find a German-speaking tourist to confide in.</p><p>In particular, it is the Germans themselves that really know how to travel: with about 6 weeks annual leave and plenty of disposable income, they have the time and the means to visit the further corners of the globe. German people spend more on foreign travel than those of any other nation; in 2007, they spent an astounding 91 billion Euros on international travel!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you’re thinking about learning a new language, German could well make an excellent choice. It may not leap to mind as an exciting language to have in your arsenal, but hear us out… While German doesn’t have the romantic allure of French, or be considered a business asset like Chinese, the language wins hands down once you start considering its other strengths.&lt;/p&gt;
&lt;p&gt;If you’re worried we going to say you should learn German because 120 million native speakers worldwide, fear not. Below, we’ve covered the five most interesting reasons why German should take pride of place on your skills list.&lt;/p&gt;
    
    </summary>
    
      <category term="German" scheme="http://wanlizhu.github.io/categories/German/"/>
    
    
      <category term="German" scheme="http://wanlizhu.github.io/tags/German/"/>
    
  </entry>
  
  <entry>
    <title>CMake | Checking Platform</title>
    <link href="http://wanlizhu.github.io/2018/12/25/cmake-checking-platform/"/>
    <id>http://wanlizhu.github.io/2018/12/25/cmake-checking-platform/</id>
    <published>2018-12-25T13:15:55.000Z</published>
    <updated>2018-12-30T17:21:41.334Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#platform-variables"><strong>Platform Variables</strong></a></li><li><a href="#cmake-system"><strong>CMake System</strong></a></li></ul><!-- tocstop --><a id="more"></a><p>There are several different ways to check the current system/platform in CMake, and each interacts with cross-compiling in different ways.</p><h2><span id="platform-variables"><strong>Platform Variables</strong></span></h2><hr><p>CMake sets certain variables to true depending on the current platform and toolchain in use. These always describe the target platform.</p><ul><li><p><strong>UNIX</strong> : is TRUE on all UNIX-like OS’s, including Apple OS X and CygWin</p></li><li><p><strong>WIN32</strong> : is TRUE on Windows. Prior to 2.8.4 this included CygWin</p></li><li><p><strong>APPLE</strong> : is TRUE on Apple systems. Note this does not imply the system is Mac OS X, only that <strong>APPLE</strong> is #defined in C/C++ header files.</p></li><li><p><strong>MINGW</strong> : is TRUE when using the MinGW compiler in Windows</p></li><li><p><strong>MSYS</strong> : is TRUE when using the MSYS developer environment in Windows</p></li><li><p><strong>CYGWIN</strong> : is TRUE on Windows when using the CygWin version of cmake</p></li></ul><h2><span id="cmake-system"><strong>CMake System</strong></span></h2><hr><p>A cleaner and more cross-compiling-compatible way to check the current platform is through the CMAKE_SYSTEM variables.</p><ul><li><p><strong>CMAKE_SYSTEM</strong> : the complete system name, e.g. “Linux-2.4.22”, “FreeBSD-5.4-RELEASE” or “Windows 5.1”</p></li><li><p><strong>CMAKE_SYSTEM_NAME</strong> : The name of the system targeted by the build. The three common values are Windows, Darwin, and Linux, though several others exist, such as Android, FreeBSD, and CrayLinuxEnvironment. Platforms without an operating system, such as embedded devices, are given Generic as a system name.</p></li><li><p><strong>CMAKE_SYSTEM_VERSION</strong> : Version of the operating system. Generally the kernel version.</p></li><li><p><strong>CMAKE_SYSTEM_PROCESSOR</strong> : the processor name (e.g. “Intel(R) Pentium(R) M processor 2.00GHz”)</p></li><li><p><strong>CMAKE_HOST_SYSTEM_NAME</strong> : The name of the system hosting the build. Has the same possible values as CMAKE_SYSTEM_NAME.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#platform-variables&quot;&gt;&lt;strong&gt;Platform Variables&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cmake-system&quot;&gt;&lt;strong&gt;CMake System&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="SW" scheme="http://wanlizhu.github.io/categories/SW/"/>
    
    
      <category term="CMake" scheme="http://wanlizhu.github.io/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>CMake | Useful Variables</title>
    <link href="http://wanlizhu.github.io/2018/12/25/cmake-useful-variables/"/>
    <id>http://wanlizhu.github.io/2018/12/25/cmake-useful-variables/</id>
    <published>2018-12-25T12:30:51.000Z</published>
    <updated>2018-12-30T17:21:21.330Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#locations"><strong>Locations</strong></a></li><li><a href="#environment-variables"><strong>Environment Variables</strong></a></li><li><a href="#system-compiler-information"><strong>System &amp; Compiler Information</strong></a></li><li><a href="#various-options"><strong>Various Options</strong></a></li><li><a href="#compilers-and-tools"><strong>Compilers and Tools</strong></a></li><li><a href="#prefixes-suffixes-postfixes-and-extensions"><strong>Prefixes, Suffixes (Postfixes), and Extensions</strong></a></li></ul><!-- tocstop --><a id="more"></a><h2><span id="locations"><strong>Locations</strong></span></h2><hr><ul><li><p><strong>CMAKE_BINARY_DIR</strong> : if you are building in-source, this is the same as CMAKE_SOURCE_DIR, otherwise this is the top level directory of your build tree</p></li><li><p><strong>CMAKE_COMMAND</strong> : this is the complete path of the cmake which runs currently (e.g. <code>/usr/local/bin/cmake</code>). Note that if you have custom commands that invoke <code>cmake -E</code>, it is very important to use CMAKE_COMMAND as the CMake executable, because CMake might not be on the system PATH.</p></li><li><p><strong>CMAKE_CURRENT_BINARY_DIR</strong> : if you are building in-source, this is the same as CMAKE_CURRENT_SOURCE_DIR, otherwise this is the directory where the compiled or generated files from the current CMakeLists.txt will go to.</p></li><li><p><strong>CMAKE_CURRENT_SOURCE_DIR</strong> : this is the directory where the currently processed CMakeLists.txt is located in</p></li><li><p><strong>CMAKE_CURRENT_LIST_FILE</strong> : this is the full path to the listfile currently being processed.</p></li><li><p><strong>CMAKE_CURRENT_LIST_DIR</strong> : (since 2.8.3) this is the directory of the listfile currently being processed.</p></li><li><p><strong>CMAKE_CURRENT_LIST_LINE</strong> : this is linenumber where the variable is used.</p></li><li><p><strong>CMAKE_FILES_DIRECTORY</strong> : the directory within the current binary directory that contains all the CMake generated files. Typically evaluates to “/CMakeFiles”. Note the leading slash for the directory. Typically used with the current binary directory, i.e. ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}</p></li><li><p><strong>CMAKE_MODULE_PATH</strong> : tell CMake to search first in directories listed in CMAKE_MODULE_PATH when you use FIND_PACKAGE() or INCLUDE()</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">SET</span><span class="hljs-params">(CMAKE_MODULE_PATH $&#123;PROJECT_SOURCE_DIR&#125;/MyCMakeScripts)</span></span><br><span class="hljs-function"><span class="hljs-title">FIND_PACKAGE</span><span class="hljs-params">(HelloWorld)</span></span><br></code></pre></td></tr></table></figure><ul><li><p><strong>CMAKE_ROOT</strong> : this is the CMake installation directory</p></li><li><p><strong>CMAKE_SOURCE_DIR</strong> : this is the directory which contains the top-level CMakeLists.txt, i.e. the top level source directory</p></li><li><p><strong>PROJECT_NAME</strong> : the name of the project set by PROJECT() command.</p></li><li><p><strong>CMAKE_PROJECT_NAME</strong> : the name of the first project set by the PROJECT() command, i.e. the top level project.</p></li><li><p><strong>PROJECT_BINARY_DIR</strong> : contains the full path to the top level directory of your build tree</p></li><li><p><strong>PROJECT_SOURCE_DIR</strong> : contains the full path to the root of your project source directory, i.e. to the nearest directory where CMakeLists.txt contains the PROJECT() command</p></li></ul><h2><span id="environment-variables"><strong>Environment Variables</strong></span></h2><hr><p>These are environment variables which effect cmake behaviour.</p><ul><li><p><strong>CMAKE_INCLUDE_PATH</strong> : This is used when searching for include files e.g. using the FIND_PATH() command. If you have headers in non-standard locations, it may be useful to set this variable to this directory (e.g. <code>/sw/include</code> on Mac OS X). If you need several directories, separate them by the platform specific separators (e.g. “:” on UNIX)</p></li><li><p><strong>CMAKE_LIBRARY_PATH</strong> : This is used when searching for libraries e.g. using the FIND_LIBRARY() command. If you have libraries in non-standard locations, it may be useful to set this variable to this directory (e.g. <code>/sw/lib</code> on Mac OS X). If you need several directories, separate them by the platform specific separators (e.g. “:” on UNIX)</p></li><li><p><strong>CMAKE_PREFIX_PATH</strong> : (since CMake 2.6.0) This is used when searching for include files, binaries, or libraries using either the FIND_PACKAGE(), FIND_PATH(), FIND_PROGRAM(), or FIND_LIBRARY() commands. For each path in the CMAKE_PREFIX_PATH list, CMake will check “PATH/include” and “PATH” when FIND_PATH() is called, “PATH/bin” and “PATH” when FIND_PROGRAM() is called, and “PATH/lib” and “PATH” when FIND_LIBRARY() is called. See the documentation for FIND_PACKAGE(), FIND_LIBRARY(), FIND_PATH(), and FIND_PROGRAM() for more details.</p></li><li><p><strong>CMAKE_INSTALL_ALWAYS</strong> : If set during installation CMake will install all files whether they have changed or not. The default when this is not set is to install only files that have changed since the previous installation. In both cases all files are reported to indicate CMake knows they are up to date in the installed location.</p></li><li><p><strong>$ENV{name}</strong> : This is not an environment variable , but this is how you can access environment variables from cmake files. It returns the content of the environment variable with the given name (e.g. <code>$ENV{PROGRAMFILES}</code>)</p></li><li><p><strong>DESTDIR</strong> : If this environment variable is set it will be prefixed to CMAKE_INSTALL_PREFIX in places where it is used to access files during installation. This allows the files to be installed in an intermediate directory tree without changing the final installation path name. Since the value of CMAKE_INSTALL_PREFIX may be included in installed files it is important to use DESTDIR rather than changing CMAKE_INSTALL_PREFIX when it is necessary to install to a intermediate staging directory.</p></li></ul><h2><span id="system-amp-compiler-information"><strong>System &amp; Compiler Information</strong></span></h2><hr><ul><li><p><strong>CMAKE_MAJOR_VERSION</strong> : major version number for CMake, e.g. the “2” in CMake 2.4.3</p></li><li><p><strong>CMAKE_MINOR_VERSION</strong> : minor version number for CMake, e.g. the “4” in CMake 2.4.3</p></li><li><p><strong>CMAKE_PATCH_VERSION</strong> : patch version number for CMake, e.g. the “3” in CMake 2.4.3</p></li><li><p><strong>CMAKE_TWEAK_VERSION</strong> : tweak version number for CMake, e.g. the “1” in CMake X.X.X.1. Releases use tweak &lt; 20000000 and development versions use the date format CCYYMMDD for the tweak level.</p></li><li><p><strong>CMAKE_VERSION</strong> : The version number combined, eg. 2.8.4.20110222-ged5ba for a Nightly build. or 2.8.4 for a Release build.</p></li><li><p><strong>CMAKE_GENERATOR</strong> : the generator specified on the commandline.</p></li><li><p><strong>BORLAND</strong> : is TRUE on Windows when using a Borland compiler</p></li><li><p><strong>WATCOM</strong> : is TRUE on Windows when using the Open Watcom compiler</p></li><li><p><strong>MSVC, MSVC_IDE, MSVC60, MSVC70, MSVC71, MSVC80,<br>CMAKE_COMPILER_2005, MSVC90, MSVC10 (Visual Studio 2010)</strong> : Microsoft compiler</p></li><li><p><strong>CMAKE_C_COMPILER_ID</strong> : one of “Clang”, “GNU”, “Intel”, or “MSVC”. This works even if a compiler wrapper like ccache is used.</p></li><li><p><strong>CMAKE_CXX_COMPILER_ID</strong> : one of “Clang”, “GNU”, “Intel”, or “MSVC”. This works even if a compiler wrapper like ccache is used.</p></li></ul><p>See the <a href="https://gitlab.kitware.com/cmake/community/wikis/doc/cmake/Checking-Platform" target="_blank" rel="noopener">Checking the Current Platform</a> page for a list of the variables pertaining to platform checks.</p><h2><span id="various-options"><strong>Various Options</strong></span></h2><hr><ul><li><p><strong>CMAKE_SKIP_RULE_DEPENDENCY</strong> : set this to true if you don’t want to rebuild the object files if the rules have changed, but not the actual source files or headers (e.g. if you changed the some compiler switches)</p></li><li><p><strong>CMAKE_SKIP_INSTALL_ALL_DEPENDENCY</strong> : since CMake 2.1 the install rule depends on all, i.e. everything will be built before installing. If you don’t like this, set this one to true.</p></li><li><p><strong>CMAKE_INCLUDE_CURRENT_DIR</strong> : automatically add CMAKE_CURRENT_SOURCE_DIR and CMAKE_CURRENT_BINARY_DIR to the include directories in every processed CMakeLists.txt. It behaves as if you had used INCLUDE_DIRECTORIES in every CMakeLists.txt file or your project. The added directory paths are relative to the being-processed CMakeLists.txt, which is different in each directory. (See <a href="http://www.cmake.org/pipermail/cmake/2007-March/013193.html" target="_blank" rel="noopener">this thread</a> for more details).</p></li><li><p><strong>CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE</strong> : order the include directories so that directories which are in the source or build tree always come before directories outside the project.</p></li><li><p><strong>CMAKE_VERBOSE_MAKEFILE</strong> : set this to true if you are using makefiles and want to see the full compile and link commands instead of only the shortened ones</p></li><li><p><strong>CMAKE_SUPPRESS_REGENERATION</strong> : this will cause CMake to not put in the rules that re-run CMake. This might be useful if you want to use the generated build files on another machine.</p></li><li><p><strong>CMAKE_COLOR_MAKEFILE</strong> : create Makefiles with colored output (defaults to on)</p></li><li><p><strong>CMAKE_SKIP_PREPROCESSED_SOURCE_RULES</strong> : (since 2.4.4) if set to TRUE, the generated Makefiles will not contain rules for creating preprocessed files (foo.i)</p></li><li><p><strong>CMAKE_SKIP_ASSEMBLY_SOURCE_RULES</strong> : (since 2.4.4) if set to TRUE, the generated Makefiles will not contain rules for creating compiled, but not yet assembled files (foo.s)</p></li></ul><h2><span id="compilers-and-tools"><strong>Compilers and Tools</strong></span></h2><hr><ul><li><p><strong>BUILD_SHARED_LIBS</strong> : if this is set to ON, then all libraries are built as shared libraries by default. <code>SET(BUILD_SHARED_LIBS ON)</code></p></li><li><p><strong>CMAKE_BUILD_TYPE</strong> : A variable which controls the type of build when using a single-configuration generator like the Makefile generator. It is case-insensitive.</p></li></ul><p>CMake will create by default the following variables when using a single-configuration generator:</p><ul><li>None (CMAKE_C_FLAGS or CMAKE_CXX_FLAGS used)</li><li>Debug (CMAKE_C_FLAGS_DEBUG or CMAKE_CXX_FLAGS_DEBUG)</li><li>Release (CMAKE_C_FLAGS_RELEASE or - CMAKE_CXX_FLAGS_RELEASE)</li><li>RelWithDebInfo (CMAKE_C_FLAGS_RELWITHDEBINFO or CMAKE_CXX_FLAGS_RELWITHDEBINFO</li><li>MinSizeRel (CMAKE_C_FLAGS_MINSIZEREL or CMAKE_CXX_FLAGS_MINSIZEREL)</li></ul><p>You can use these default compilation flags (or modify them) by setting the CMAKE_BUILD_TYPE variable at configuration time on the command line, or from within the “ccmake” GUI. <strong>Note!</strong> The default values for these flags change with different compilers. If CMake does not know your compiler, the contents will be empty.</p><p>If you are using the Makefile generator, you can create your own build type like this:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">SET</span>(CMAKE_BUILD_TYPE distribution)<br><span class="hljs-keyword">SET</span>(CMAKE_CXX_FLAGS_DISTRIBUTION <span class="hljs-string">"-O3"</span>)<br><span class="hljs-keyword">SET</span>(CMAKE_C_FLAGS_DISTRIBUTION <span class="hljs-string">"-O3"</span>)<br></code></pre></td></tr></table></figure><p>Note that CMAKE_BUILD_TYPE is not initialized with a readable value at configuration time. This is because the user is free to select a build type at build time. Use CMAKE_CFG_INTDIR if you need a variable that evaluates to the correct build time directory.</p><ul><li><p><strong>CMAKE_CONFIGURATION_TYPES</strong> : When using a multi-configuration generator, such as the one for Visual Studio, this variable contains a list of the available configurations.</p></li><li><p><strong>CMAKE_C_COMPILER</strong> : the compiler used for C files. Normally it is detected and set during the CMake run, but you can override it at configuration time. <strong>Note!</strong> It can not be changed after the first cmake or ccmake run. Although the gui allows to enter an alternative, it will be ignored in the next ‘configure’ run. </p></li></ul><p>Use for example: <code>CC=gcc-3.3 CXX=g++-3.3 cmake</code><br>to set the compiler. (You can also set CMAKE_C_COMPILER_INIT, before any PROJECT() or ENABLE_LANGUAGE() command.) </p><p>Any other way (like writing make <code>CC=gcc-3.3 CXX=g++-3.3</code>) will not work. When using distcc or similar tools, you need to write: <code>CC=&quot;distcc gcc-3.3&quot; CXX=&quot;distcc g++-3.3&quot;</code> cmake However, this will empty all your CMAKE_…FLAGS… above.</p><ul><li><p><strong>CMAKE_C_FLAGS</strong> : the compiler flags for compiling C sources. Note you can also specify switches with ADD_COMPILE_OPTIONS().</p></li><li><p><strong>CMAKE_C_FLAGS_</strong> : compiler flags for a specific build configuration. Replace “” in the name with a specific build configuration name.</p></li><li><p><strong>CMAKE_C_OUTPUT_EXTENSION</strong> : what C object files end in. Typically .o or .obj.</p></li><li><p><strong>CMAKE_CFG_INTDIR</strong> : meta-variable! Please note that this is an important variable, since on multi-configuration generators it will be generated into dynamically switched content based on the configuration that the user currently selected within the generated build environment. Indicates the name of the current configuration (~ directory) for the project. </p></li></ul><p>May be used for any purpose which needs per-configuration-dynamic switching of strings, not just OutputDir configuration. For multi-configuration generators (e.g. MSVC) the resulting strings are typically some of “Debug”, “Release”, “RelWithDebInfo”, or “MinSizeRel”. </p><p>For other compiler generators (single-configuration ones) it is typically “.”, as they don’t use MSVC-style configuration directories.</p><ul><li><p><strong>CMAKE_CXX_COMPILER</strong> : the compiler used for C++ files. Normally it is detected and set during the CMake run, but you can override it at configuration time. <strong>Note!</strong> It can not be changed after the first cmake or ccmake run. See CMAKE_C_COMPILER above.</p></li><li><p><strong>CMAKE_CXX_FLAGS</strong> : the compiler flags for compiling C++ sources. Note you can also specify switches with ADD_COMPILE_OPTIONS().</p></li><li><p><strong>CMAKE_CXX_FLAGS_</strong> : compiler flags for a specific configuration for C++ sources. Replace “” in the name with a specific build configuration name.</p></li><li><p><strong>CMAKE_SHARED_LINKER_FLAGS</strong> : additional compiler flags for building shared libraries, e.g.:</p></li></ul><p><code>set(CMAKE_SHARED_LINKER_FLAGS &quot;-Wl,--no-undefined&quot;)</code> On Unix systems, this will make linker report any unresolved symbols from object files (which is quite typical when you compile many targets in CMake projects, but do not bother with linking target dependencies in proper order). On mac, the flag is <code>-Wl,-undefined-error</code>.</p><h2><span id="prefixes-suffixes-postfixes-and-extensions"><strong>Prefixes, Suffixes (Postfixes), and Extensions</strong></span></h2><hr><ul><li><p><strong>CMAKE_EXECUTABLE_SUFFIX</strong> : Suffix of executables on the target platform.</p></li><li><p><strong>CMAKE_FIND_LIBRARY_PREFIXES</strong> : List of possible library prefixes used by find_library(). “lib” on UNIX systems.</p></li><li><p><strong>CMAKE_FIND_LIBRARY_SUFFIXES</strong> : List of possible library suffixes used by find_library(). “.a;.so” on UNIX systems. Note that it’s possible to use this to control whether find_package() modules find shared or static libraries.</p></li><li><p><strong>CMAKE_&lt;SHARED|STATIC&gt;_LIBRARY_PREFIX</strong> : Prefix for shared or static libraries on this platform. Read-only.</p></li><li><p><strong>CMAKE_&lt;SHARED|STATIC&gt;_LIBRARY_SUFFIX</strong> : Suffix for shared or static libraries on this platform. Read-only.</p></li><li><p><strong>CMAKE_POSTFIX</strong> : Adds a custom “postfix” to static and shared libraries when in a certain build type. Example: Setting <code>CMAKE_BUILD_TYPE=DEBUG</code> and <code>CMAKE_DEBUG_POSTFIX=&quot;_d&quot;</code> would turn mylib.lib into mylib_d.lib.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#locations&quot;&gt;&lt;strong&gt;Locations&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#environment-variables&quot;&gt;&lt;strong&gt;Environment Variables&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#system-compiler-information&quot;&gt;&lt;strong&gt;System &amp;amp; Compiler Information&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#various-options&quot;&gt;&lt;strong&gt;Various Options&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#compilers-and-tools&quot;&gt;&lt;strong&gt;Compilers and Tools&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#prefixes-suffixes-postfixes-and-extensions&quot;&gt;&lt;strong&gt;Prefixes, Suffixes (Postfixes), and Extensions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="SW" scheme="http://wanlizhu.github.io/categories/SW/"/>
    
    
      <category term="CMake" scheme="http://wanlizhu.github.io/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>The Power Of Nostalgia</title>
    <link href="http://wanlizhu.github.io/2018/12/13/the-power-of-nostalgia/"/>
    <id>http://wanlizhu.github.io/2018/12/13/the-power-of-nostalgia/</id>
    <published>2018-12-13T15:12:17.000Z</published>
    <updated>2018-12-30T17:22:56.151Z</updated>
    
    <content type="html"><![CDATA[<p>It may surprise you to know that in the 1600s nostalgia was classified as a neurologic disorder that occurred mainly within soldiers who were spending many years abroad away from their home. ‘Nostos’ is a word for homecoming and ‘Algos’ is a word for pain, when you combine those you get ‘nostalgia’.</p><p>Fast forwarding to the 19th and 20th centuries, nostalgis became now classified as a <strong>psychological disorder</strong> where experts thought if their patients spent too much time thinking about the past, they weren’t living in the present and that was a disease. In 2018, we have realized that is not the case.</p><p>Nostalgia can be a very positive emotion that <strong>is stabilizing to</strong> us during times of change and transition. As humans we need nostalgia to constantly remind us of meaning in our lives, and those of us who never experienced nostalgia are actually a little bit worse than those who experience on a regular basis. That warm comforting feeling that you get when you reminisce about something that happened in the past, that’s nostalgis.</p><a id="more"></a><h2><span id="what-brings-on-nostalgia">What brings on nostalgia?</span></h2><p>Science tells us that during moments of change and transition, we’re most likely to experience the feelings of nostalgia. They’re calming, they give us motivation to get through whatever challenges lay ahead of us. It’s not so much that we look at the presidents, “oh, this is awful, it used to be so much better back then”, it’s about finding meaning in what we’ve accomplished in the past to allow us to be more motivated and accomplish our goals in the future. It’s really a positive emotion and has sort of been ill-defined in the past. </p><p>Interestingly, your senses are very well connected to that part of your brain if you were to smell something you’ve connected with a past memory that could trigger feelings of nostalgia. You smell the cologne or perfume on somebody and it brings you back to an experience that you had with a partner in your early years, that’s nostalgia. Hearing a song brings you back to wherever you first heard that song, that’s nostalgia in full effect, and I would say music is probably the most common trigger of that. </p><h2><span id="is-nostalgia-always-a-good-thing">Is nostalgia always a good thing?</span></h2><p>The feelings of nostalgia are generally good, but there is a thin line there where it can become <strong>pathologic</strong> or a bad thing. Take for instance, someone who has historical nostalgia which is where they live in the present, but they hate everything about it and want it to be more like the past, they’ll do anything to disconnect themselves from the present and try to make things like how they used to be.</p><p>There’s certain times where you can do that in a positive way where you can take aspects of things that were great in the past and bring them to the present or even the future, but there’s also bad ways of doing that. It’s important to note that <strong>with every good things, too much of it, can be a bad thing</strong>.</p><p>Think of one of your greatest memories. In fact, think of any memory. Doesn’t it seem like you were having an amazing time? Doesn’t it seem like it can’t compare to the present? When thinking about the present, you <strong>inherently</strong> think about the future. The future carries stress and worry. Worry is the best way to keep happiness at bay (rhymed on purpose). On the other hand, when thinking about the past, you inherently AREN’T thinking about the future. This makes the past appear <strong>superior to</strong> the present, aka, nostalgia.</p><p>Memory is an imperfect tool. We think about memory as being something very exact, a science. It’s not like that as all. The more you access a memory in the further away that memory is, the more likely it is you’re to change it and forget key details. Sometimes people refer to this as Rosy <strong>retrospection</strong>. Essentially what you are doing is <strong>exhibiting</strong> a <strong>cognitive bias</strong> when you’re thinking something was amazing, it might have been a stressful time if were to dive into your head in that given moment. </p><p>You can actually see how this type of nostalgia or rosy retrospection can be a survival tool, because if you want to <strong>foster</strong> well-being in a society in your own mind, it’s best to not remember all those stressful details and instead bring that positive motivation forward. Essentially what you’re doing, as a human, is creating meaning for yourself in a world where it’s very easy to get lost and even confused at times.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It may surprise you to know that in the 1600s nostalgia was classified as a neurologic disorder that occurred mainly within soldiers who were spending many years abroad away from their home. ‘Nostos’ is a word for homecoming and ‘Algos’ is a word for pain, when you combine those you get ‘nostalgia’.&lt;/p&gt;
&lt;p&gt;Fast forwarding to the 19th and 20th centuries, nostalgis became now classified as a &lt;strong&gt;psychological disorder&lt;/strong&gt; where experts thought if their patients spent too much time thinking about the past, they weren’t living in the present and that was a disease. In 2018, we have realized that is not the case.&lt;/p&gt;
&lt;p&gt;Nostalgia can be a very positive emotion that &lt;strong&gt;is stabilizing to&lt;/strong&gt; us during times of change and transition. As humans we need nostalgia to constantly remind us of meaning in our lives, and those of us who never experienced nostalgia are actually a little bit worse than those who experience on a regular basis. That warm comforting feeling that you get when you reminisce about something that happened in the past, that’s nostalgis.&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="http://wanlizhu.github.io/categories/English/"/>
    
    
      <category term="English" scheme="http://wanlizhu.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>CMake Manual</title>
    <link href="http://wanlizhu.github.io/2018/12/09/cmake-manual/"/>
    <id>http://wanlizhu.github.io/2018/12/09/cmake-manual/</id>
    <published>2018-12-09T09:13:00.000Z</published>
    <updated>2018-12-30T17:21:03.087Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#basics"><strong>Basics</strong></a><ul><li><a href="#1-hello-world"><strong>1. Hello World</strong></a><ul><li><a href="#11-creating-an-executable"><strong>1.1 Creating an Executable</strong></a></li><li><a href="#12-binary-directory"><strong>1.2 Binary Directory</strong></a></li><li><a href="#13-in-place-out-of-source-build"><strong>1.3 In-Place &amp; Out-of-Source Build</strong></a></li><li><a href="#build-the-example">Build the Example</a></li></ul></li><li><a href="#2-hello-world-with-headers"><strong>2. Hello World with Headers</strong></a><ul><li><a href="#21-directory-paths"><strong>2.1 Directory Paths</strong></a></li><li><a href="#22-source-files-variable"><strong>2.2 Source Files Variable</strong></a></li><li><a href="#23-including-directories"><strong>2.3 Including Directories</strong></a></li></ul></li></ul></li></ul><!-- tocstop --><p><a href="https://gitlab.kitware.com/cmake/community/wikis/home" target="_blank" rel="noopener">CMake Community Wiki</a>.</p><a id="more"></a><h2><span id="basics"><strong>Basics</strong></span></h2><h3><span id="1-hello-world"><strong>1. Hello World</strong></span></h3><p>Directory structure for this example is below:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">/<br><span class="hljs-string">|--CMakeLists.txt</span><br><span class="hljs-string">|-- main.cpp</span><br><span class="hljs-string">|-- header.h</span><br></code></pre></td></tr></table></figure></p><p>Content of CMakeLists.txt is below:<br><figure class="highlight CMake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="hljs-number">3.5</span>)<br><span class="hljs-keyword">PROJECT</span>(HelloWorld)<br><span class="hljs-keyword">ADD_EXECUTABLE</span>(<span class="hljs-variable">$&#123;ProjectName&#125;</span> main.cpp)<br></code></pre></td></tr></table></figure></p><h4><span id="11-creating-an-executable"><strong>1.1 Creating an Executable</strong></span></h4><p>The <code>add_executable()</code> command specifies that an executable should be build from the specified source files, in this example main.cpp. The first argument to the <code>add_executable()</code> function is the name of the executable to be built, and the second argument is the list of source files to compile.</p><p>In this example, the <code>project()</code> function, will create a variable <code>${PROJECT_NAME}</code> with the value HelloWorld. This can then be passed to the <code>add_executable()</code> function to output a ‘HelloWorld’ executable.</p><h4><span id="12-binary-directory"><strong>1.2 Binary Directory</strong></span></h4><p>The root or top level folder that you run the cmake command from is known as your <code>CMAKE_BINARY_DIR</code> and is the root folder for all your binary files. CMake supports building and generating your binary files both <strong><em>in-place</em></strong> and also <strong><em>out-of-source</em></strong> which is highly recommended.</p><h4><span id="13-in-place-amp-out-of-source-build"><strong>1.3 In-Place &amp; Out-of-Source Build</strong></span></h4><p><strong><em>In-place builds</em></strong> generate all temporary build files in the same directory structure as the source code. This means that all Makefiles and object files are interspersed with your normal code. </p><p><strong><em>Out-of-source builds</em></strong> allow you to create a single build folder that can be anywhere on your file system. All temporary build and object files are located in this directory keeping your source tree clean. To create an out-of-source build run the cmake command in the build folder and point it to the directory with your root CMakeLists.txt file. Using out-of-source builds if you want to recreate your cmake environment from scratch, you only need to delete your build directory and then rerun cmake.</p><h4><span id="build-the-example">Build the Example</span></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt; mkdir build<br>&gt;&gt; <span class="hljs-built_in">cd</span> build<br>&gt;&gt; cmake .. -G <span class="hljs-string">"Visual Studio 15 2017 Win64"</span><br>&gt;&gt; cmake --build .<br>&gt;&gt; ./HelloWorld<br></code></pre></td></tr></table></figure><h3><span id="2-hello-world-with-headers"><strong>2. Hello World with Headers</strong></span></h3><p>Directory structure for this example is below:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">/<br>|<span class="hljs-string">--CMakeLists.txt<br></span>|<span class="hljs-string">-- include<br></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- Hello.h<br></span>|<span class="hljs-string">-- src<br>    </span>|<span class="hljs-string">-- Hello.cpp<br>    </span>|<span class="hljs-string">-- main.cpp</span><br></code></pre></td></tr></table></figure></p><p>Content of CMakeLists.txt is below:<br><figure class="highlight CMake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="hljs-number">3.5</span>)<br><span class="hljs-keyword">PROJECT</span>(HelloWorld)<br><br><span class="hljs-keyword">SET</span>(SRC_LIST<br>    src/Hello.cpp<br>    src/main.cpp)<br><span class="hljs-keyword">ADD_EXECUTABLE</span>(<span class="hljs-variable">$&#123;ProjectName&#125;</span> <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">TARGET_INCLUDE_DIRECTORIES</span>(<span class="hljs-variable">$&#123;ProjectName&#125;</span> PRIVATE<br>    <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br></code></pre></td></tr></table></figure></p><h4><span id="21-directory-paths"><strong>2.1 Directory Paths</strong></span></h4><p>CMake syntax specifies a number of <a href="https://www.wanlizhu.github.io/cmake-useful-variables" target="_blank" rel="noopener">variables</a> which can be used to help find useful directories in your project or source tree. Some of these include:</p><table><thead><tr><th style="text-align:left"><strong>Variable</strong></th><th style="text-align:left"><strong>Information</strong></th></tr></thead><tbody><tr><td style="text-align:left">CMAKE_SOURCE_DIR</td><td style="text-align:left">The root source directory</td></tr><tr><td style="text-align:left">CMAKE_CURRENT_SOURCE_DIR</td><td style="text-align:left">The current source directory if using sub-projects and directories</td></tr><tr><td style="text-align:left">PROJECT_SOURCE_DIR</td><td style="text-align:left">The source directory of the current cmake project</td></tr><tr><td style="text-align:left">CMAKE_BINARY_DIR</td><td style="text-align:left">The root binary / build directory. This is the directory where you ran the cmake command</td></tr><tr><td style="text-align:left">CMAKE_CURRENT_BINARY_DIR</td><td style="text-align:left">The build directory you are currently in</td></tr><tr><td style="text-align:left">PROJECT_BINARY_DIR</td></tr></tbody></table><p>The build directory for the current project|</p><h4><span id="22-source-files-variable"><strong>2.2 Source Files Variable</strong></span></h4><p>Creating a variable which includes the source files allows you to be clearer about these files and easily add them to multiple commands, for example, the add_executable() function.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># Create a sources variable with a link to all cpp files to compile</span><br><span class="hljs-keyword">SET</span>(SOURCES<br>    src/Hello.cpp<br>    src/main.cpp)<br><br><span class="hljs-keyword">ADD_EXECUTABLE</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br></code></pre></td></tr></table></figure><hr><p><strong>Note!</strong> : An alternative to setting specific file names in the SOURCES variable is to use a GLOB command to find files using wildcard pattern matching. <code>FILE(GLOB SOURCES &quot;src/*.cpp&quot;)</code></p><hr><hr><p><strong>Tip</strong> : For modern CMake it is NOT recommended to use a variable for sources. Insead it is typical to directly declare the sources in the add_xxx function. This is particularly important for glob commands which may not always show you the correct results if you add a new source file.</p><hr><h4><span id="23-including-directories"><strong>2.3 Including Directories</strong></span></h4><p>When you have different include folders, you can make your compiler aware of them using the <code>target_include_directories()</code> function. When compiling this target this will add these directories to the compiler with the <code>-I</code> flag e.g. <code>-I/directory/path</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">TARGET_INCLUDE_DIRECTORIES</span>(<span class="hljs-keyword">target</span> PRIVATE<br>    <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br></code></pre></td></tr></table></figure><p>The <strong>PRIVATE</strong> identifier specifies the scope of the include. This is important for libraries and there are two other identifiers of scope (INTERFACE and PUBLIC).</p><table><thead><tr><th style="text-align:left">Scope</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">PRIVATE</td><td style="text-align:left">the directory is added to this target’s include directories</td></tr><tr><td style="text-align:left">INTERFACE</td><td style="text-align:left">the directory is added to the include directores for any targets that link this library</td></tr><tr><td style="text-align:left">PUBLIC</td><td style="text-align:left">As above, it is included int his library and also any targets that link this library</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#basics&quot;&gt;&lt;strong&gt;Basics&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-hello-world&quot;&gt;&lt;strong&gt;1. Hello World&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11-creating-an-executable&quot;&gt;&lt;strong&gt;1.1 Creating an Executable&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12-binary-directory&quot;&gt;&lt;strong&gt;1.2 Binary Directory&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#13-in-place-out-of-source-build&quot;&gt;&lt;strong&gt;1.3 In-Place &amp;amp; Out-of-Source Build&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#build-the-example&quot;&gt;Build the Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-hello-world-with-headers&quot;&gt;&lt;strong&gt;2. Hello World with Headers&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-directory-paths&quot;&gt;&lt;strong&gt;2.1 Directory Paths&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-source-files-variable&quot;&gt;&lt;strong&gt;2.2 Source Files Variable&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-including-directories&quot;&gt;&lt;strong&gt;2.3 Including Directories&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.kitware.com/cmake/community/wikis/home&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CMake Community Wiki&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="SW" scheme="http://wanlizhu.github.io/categories/SW/"/>
    
    
      <category term="CMake" scheme="http://wanlizhu.github.io/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>Politics | Does the EU Really Need the UK?</title>
    <link href="http://wanlizhu.github.io/2018/12/08/politics-does-the-eu-really-need-the-uk/"/>
    <id>http://wanlizhu.github.io/2018/12/08/politics-does-the-eu-really-need-the-uk/</id>
    <published>2018-12-08T02:54:45.000Z</published>
    <updated>2018-12-30T17:22:32.010Z</updated>
    
    <content type="html"><![CDATA[<p><em>The UK needs the EU slightly more than they need the UK.</em></p><p><strong>What would the EU lose?</strong></p><ul><li>access to a major trading partner.</li><li>13% of their budget.</li><li>an important ally when it comes to security.</li></ul><p><strong>What would the UK lose?</strong></p><ul><li>single market access to a trading block which makes up about 50% of their international trade.</li><li>an important security alliance</li><li>although they get to keep 136 million pounds a week, that will almost definitely be cancelled out by lost of economic growth at least in the short term. </li></ul><a id="more"></a><h2><span id="trade-dependency">Trade Dependency</span></h2><p><img src="/2018/12/08/politics-does-the-eu-really-need-the-uk/the-eu-trade-relying-on-the-uk.png" alt="The EU&#39;s imports and exports to/from the UK"></p><p>The UK is the second biggest country in the EU at about 2.2 trillion pounds after Germany which has an economy at about 3.1 trillion pounds. When you combine the economic power of all of the member nations, the EU as a whole, has an economy worth about 14.6 trillion pounds. As I’m sure you’ve heard a million times before, the EU is obviously a far larger block than the UK in terms of people and the size of economy, but this doesn’t necessarily mean that the UK needs the EU more than the EU needs the UK. </p><p>A more reliable indicator might be how much each side relies on the other for trade. In 2007, 53% of UK imports, worth 257 billion pounds, came from the EU, and 44% of the UK’s exports, worth 162 billion pounds, went to the EU, that’s a lot of the UK’s trade. It is sort of true that the UK is relying less on the EU for the trade than they used to do. While the UK is starting to export more to the rest of the world, the UK are <strong>simultaneously</strong> increasing the amount we export to the EU according to HMRC.</p><p>In 2011, the EU made up about 51% of the UK’s imports, in 2017, it was 53%, and it might still be rising according to HMRC. In the years since May 2017, the UK imported 55% of their goods from the EU and exported 51% of their goods to the EU. Also, these numbers don’t even include countries, like Norway or Switzerland, who aren’t part of the EU but are within the EU regulatory framework. </p><h3><span id="the-rotterdam-effect">The Rotterdam Effect</span></h3><p><img src="/2018/12/08/politics-does-the-eu-really-need-the-uk/rotterdam-effect.png" alt="The Rotterdam Effect"></p><p>Some people argue the UK actually does less trade with the EU than the numbers might say because of the Rotterdam Effect. Basically, Britain sends some of their exports destined for non-EU countries through Rotterdam ports before they go on to their intended destination, the same things happens to imports, with some of their imports passing through Rotterdam before they head to the United Kingdom. This is counted as EU trade when it could or maybe even should be counted as non-EU trade. </p><p>Though it’s hard to quantify how much of an impact this has, the ONS have estimated that it could affect 2% of UK-EU trade. Even without the Rotterdam effects, it’s pretty clear that the UK needs the EU quite a bit when it comes to trade. But, let’s see how much it works the other way around. If we don’t look at countries within the EU27, the UK is the second biggest export market for goods placing behind the US, as of 2017. Trade with the UK makes up about 16% of the goods that the EU exports to non-EU27 countries. </p><p>However, it’s important to note that this isn’t really fair given the UK is currently within the single market, they’ve got a competitive advantage against all other non-EU trading partners. If the UK were to leave the single market customs union and free trade area, that number would almost certainly drop, when you include EU27 countries within the analysis, like economic powerhouses, Germany and France. the UK makes up about 8% of the EU’s exports and about 4% of the imports. When it comes to trade, it looks like the UK needs the EU much more than the EU need the UK. </p><h2><span id="german-car-industry">German Car Industry</span></h2><p><img src="/2018/12/08/politics-does-the-eu-really-need-the-uk/the-uk-s-top-four-areas-of-manufacturing.png" alt="The UK&#39;s top four areas of manufacturing"></p><p>One quick thing we need to cover, it’s such a cliche, but we really do have to deal with it, people in favor of brexit love to bring up the EU won’t let us leave and unfavorable terms as the German car industry relies on us too much. It’s pretty easy to understand why the German car industry is brought up so regularly as it’s a huge industry worth an estimated 482.7 billions euros in 2016, and when you consider some of the mammoth car brands who manufacture in Germany, that’s hardly surprising. </p><p>So, should these companies really be shaking in their boots? A lot of their cars do end up in the UK, the United Kingdom is actually their biggest market, buying 769,000 German cars a year, far ahead of the US who’s in the second place importing 494,000 cars a year. This makes life difficult for German Chancellor, Angela Merkel, she said, back in 2016, that she didn’t want industry bosses interfering with the delicate negotiations. But she also doesn’t want it to look like she isn’t protecting German businesses and jobs that said, if the UK leaves with no deal at all, it could seriously affect the German supply chain. </p><p><img src="/2018/12/08/politics-does-the-eu-really-need-the-uk/the-german-supply-chain-could-be-torn-apart.png" alt="The German supply chain could be torn apart"></p><p>With the CEO of the German lobbying group who represents BMW, Volkswagen and Daimler, saying that the supply chains could be torn apart. Despite this, he claims that the UK will be hit harder than Germany with jobs and production facilities being moved from the UK back to the EU after brexit, and this isn’t just <strong>hypothetical</strong> job losses, a number of car companies have said that they’re not investing in the UK or pulling investment due to brexit and the uncertainty around it. This is actually very important for the UK where the top four areas of manufacturing are all related to the manufacturing of vehicles.</p><h2><span id="the-eu-budget">The EU Budget</span></h2><p>Another reason that’s often given when people say that the EU needs the UK is the money that the UK contributes the EU budget. So, how much does the UK actually pay the EU? Well, for starters, it’s not the 350 million pounds per week that certain buses might have you believe that all amounts a little over 18 billion pounds a year which is what the UK would pay if they didn’t have a rebate. </p><h3><span id="the-rebate">The Rebate</span></h3><p>The rebate was negotiated by Thatcher in 1984, it was basically because, back then, about 70% of the EU budget was spent on the common agricultural policy, and most of this money went on subsidizing French farming, while the UK didn’t get much out of it at all because of the complicated way that funding allocation is calculated. But what it basically boiled down to was the UK hasn’t got as many fields as France, and as such, doesn’t get as much money. The UK obviously didn’t like subsidizing inefficient French farmers, so they negotiated a rebate which means that the UK doesn’t pay as much as we would otherwise. Most EU countries obviously hate this, but it sort of makes sense, the Common Agricultural Policy still accounts for 37% of the EU’s expenditure and the UK still doesn’t get much money from it.</p><p>The rebate essentially saves the UK a lot of money, about 4 billion pounds each year, so they end up paying more like 14 billion pounds in the EU’s budget each year which comes to about 250 million pounds a week. This accounts for about 13% of the EU’s budget, making the UK the third biggest contributor after France and Germany, and one of the only ten net countributors, by net contributor, what we mean is the UK is spending more into the EU than they get back.</p><p>The UK gets back about 5 billion pounds in public sector spending and about a billion more in private sector credits with all these counted, the UK pays about 136 million pounds a week to the EU.</p><p>The EU budget might be a little tighter and they might have to ask more countries to countribute a bit more money, but countries such as Finland have already said that they’re happy to put a bit more in to cover the hole left by the UK. So far, it looks like the EU might be alright without us. </p><h2><span id="the-security">The Security</span></h2><p><img src="/2018/12/08/politics-does-the-eu-really-need-the-uk/the-eu-security.png" alt="The EU Security"></p><p>However. there’s one area in which the EU might need the UK, and that security while there isn’t an EU army just yet, there are some EU security programs like Europol and the european arrest warrant. All EU states also have access to the second generation Schengen information system, the European criminal records information system, the europol information system, and any information which is shared as a result of pruem decisions, a commitment towards better cross-border cooperation on DNA fingerprints and vehicle registration information, the EU also has a common security and defence policy, at the moment, the UK is one of the biggest militaries in the EU and one of the intelligence services in the world, they play a big role in EU security.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;The UK needs the EU slightly more than they need the UK.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What would the EU lose?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;access to a major trading partner.&lt;/li&gt;
&lt;li&gt;13% of their budget.&lt;/li&gt;
&lt;li&gt;an important ally when it comes to security.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What would the UK lose?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single market access to a trading block which makes up about 50% of their international trade.&lt;/li&gt;
&lt;li&gt;an important security alliance&lt;/li&gt;
&lt;li&gt;although they get to keep 136 million pounds a week, that will almost definitely be cancelled out by lost of economic growth at least in the short term. &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="English" scheme="http://wanlizhu.github.io/categories/English/"/>
    
    
      <category term="English" scheme="http://wanlizhu.github.io/tags/English/"/>
    
      <category term="Brexit" scheme="http://wanlizhu.github.io/tags/Brexit/"/>
    
  </entry>
  
  <entry>
    <title>Git Manual</title>
    <link href="http://wanlizhu.github.io/2018/12/04/git-manual/"/>
    <id>http://wanlizhu.github.io/2018/12/04/git-manual/</id>
    <published>2018-12-04T03:24:57.000Z</published>
    <updated>2018-12-30T17:21:59.991Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#config"><strong>Config</strong></a></li><li><a href="#branch"><strong>Branch</strong></a><ul><li><a href="#clone"><strong>Clone</strong></a></li><li><a href="#查询branch"><strong>查询branch</strong></a></li><li><a href="#修改branch"><strong>修改branch</strong></a></li><li><a href="#checkout"><strong>Checkout</strong></a></li><li><a href="#misc"><strong>Misc</strong></a></li></ul></li></ul><!-- tocstop --><p>For the teams I work with, we follow the design philosophy of Git:</p><ul><li>Anything in the master branch is deployable.</li><li>To work on something new, create a descriptively named branch off of master.</li><li>Commit to that branch locally and regularly push your work to the same named branch on the server.</li><li>When you need feedback or help, or you think the branch is ready for merging, open a pull request.</li><li>After someone else has reviewed and signed off on the feature, you can merge it into master.</li><li>Once it is merged and pushed to ‘master’, you can and should deploy immediately.</li></ul><a id="more"></a><p><img src="/2018/12/04/git-manual/git.png" alt="Git Workflow"></p><h1><span id="config"><strong>Config</strong></span></h1><ul><li><strong>–system</strong> 对系统的所有用户有效，该配置文件存放在/etc/gitconfig（基于Window系统下的C:/Program Files/Git/mingw64/）</li><li><strong>–global</strong> 对当前用户的所有repo有效，该配置文件存放在<strong>~/.gitconfig</strong>（用户的home目录下）</li><li><strong>–local</strong> 对当前repo有效，该配置文件存放在每个repo的.git/config中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#显示当前Git的配置文件（.gitconfig）</span><br>&gt;&gt; git config --list<br><span class="hljs-comment">#显示当前的Git用户名</span><br>&gt;&gt; git config user.name<br><span class="hljs-comment"># 设置push的默认工作模式为“只push当前branch”</span><br>&gt;&gt; git config --global push.default current<br><span class="hljs-comment"># 手动修改配置</span><br>&gt;&gt; git config --global -e<br><span class="hljs-comment"># 设置用户信息</span><br>&gt;&gt; git config --global user.name <span class="hljs-string">"xavier"</span><br>&gt;&gt; git config --global user.email <span class="hljs-string">"123@email.com"</span><br><span class="hljs-comment"># 指定文本编辑器</span><br>&gt;&gt; git config --global core.editor <span class="hljs-string">'.../nodepad++.exe'</span> -multiInst -notabbar -nosession -noPlugin<br><span class="hljs-comment"># 指定diff工具</span><br>&gt;&gt; git config --global merge.tool vimdiff<br><span class="hljs-comment"># 为Git命令创建别名</span><br>&gt;&gt; git config --global alias.ci commit<br>&gt;&gt; git config --global alias.amend ci --amend<br>&gt;&gt; git config --global alias.co checkout<br>&gt;&gt; git config --global alias.st status<br></code></pre></td></tr></table></figure><h1><span id="branch"><strong>Branch</strong></span></h1><blockquote><p>Git branches are effectively a pointer to a snapshot of your changes. Instead of copying files from directory to directory, Git stores a branch as a reference to a commit. In this sense, a branch represents the tip of a series of commits—it’s <strong><em>not a container</em></strong> for commits. The history for a branch is extrapolated through the commit relationships.</p></blockquote><h2><span id="clone"><strong>Clone</strong></span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定clone深度为1（减少版本信息的传输），clone指定的branch</span><br>&gt;&gt; git <span class="hljs-built_in">clone</span> &lt;url&gt; --depth 1 -b &lt;branch or tag&gt; <br><span class="hljs-comment"># clone时指定用户名和密码</span><br>&gt;&gt; git <span class="hljs-built_in">clone</span> https://user-name:password@&lt;remote repo&gt;<br><span class="hljs-comment"># 指定clone到哪里</span><br>&gt;&gt; git <span class="hljs-built_in">clone</span> &lt;url&gt; .<br></code></pre></td></tr></table></figure><h2><span id="查询branch"><strong>查询branch</strong></span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有的本地branch</span><br>&gt;&gt; git branch     <br>        -i  : 大小写不敏感地排序branch名<br>        -r  : 列出远端的branch<br>        -a  : 列出本地和远端的branch<br>        -v  : 列出最后一次的commit信息<br>        -vv : 列出最后一次的commit信息，和存在跟踪关系的远端分支<br>        --no-abbrev : 显示完整的SHA而不是默认的前7个字符<br><br><span class="hljs-comment"># 列出匹配成功的branch</span><br>&gt;&gt; git branch --list <span class="hljs-string">"*zhuwa*"</span> <span class="hljs-string">"*chenda*"</span><br><span class="hljs-comment"># 基于当前branch的commit创建新branch</span><br>&gt;&gt; git branch &lt;name&gt;<br><span class="hljs-comment"># 列出包含有指定commit的branch</span><br>&gt;&gt; git branch --contains &lt;commit&gt;<br><span class="hljs-comment"># 列出merge到该commit的所有branch</span><br>&gt;&gt; git branch --merged &lt;commit&gt;<br></code></pre></td></tr></table></figure><h2><span id="修改branch"><strong>修改branch</strong></span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关联远端branch</span><br>&gt;&gt; git branch --<span class="hljs-built_in">set</span>-upstream-to=&lt;url&gt;<br><span class="hljs-comment"># 和远端branch解除跟踪关系</span><br>&gt;&gt; git branch --<span class="hljs-built_in">unset</span>-upstream<br><span class="hljs-comment"># 删除本地branch</span><br>&gt;&gt; git branch -d &lt;name&gt;<br><span class="hljs-comment"># 删除远端branch</span><br>&gt;&gt; git push origin :&lt;url&gt;<br><span class="hljs-comment"># 修改branch的描述信息</span><br>&gt;&gt; git branch --edit-description<br></code></pre></td></tr></table></figure><h2><span id="checkout"><strong>Checkout</strong></span></h2><blockquote><p>In Git terms, a <strong><em>checkout</em></strong> is the act of switching between different versions of a target entity. The git checkout command operates upon three distinct entities: files, commits, and branches. <strong><em>git checkout</em></strong>, when used on branches, alters the target of the HEAD ref. It can be used to create branches, switch branches, and checkout remote branches. </p></blockquote><h2><span id="misc"><strong>Misc</strong></span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用默认浏览器打开指定命令的帮助文档</span><br>&gt;&gt; git &lt;verb&gt; --<span class="hljs-built_in">help</span><br>&gt;&gt; git <span class="hljs-built_in">help</span> &lt;verb&gt;<br><span class="hljs-comment"># 生成一个可发布的压缩包</span><br>&gt;&gt; git archive<br><span class="hljs-comment"># 查看提交历史</span><br>&gt;&gt; git <span class="hljs-built_in">log</span> --oneline<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#config&quot;&gt;&lt;strong&gt;Config&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#branch&quot;&gt;&lt;strong&gt;Branch&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#clone&quot;&gt;&lt;strong&gt;Clone&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#查询branch&quot;&gt;&lt;strong&gt;查询branch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#修改branch&quot;&gt;&lt;strong&gt;修改branch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#checkout&quot;&gt;&lt;strong&gt;Checkout&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#misc&quot;&gt;&lt;strong&gt;Misc&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;p&gt;For the teams I work with, we follow the design philosophy of Git:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anything in the master branch is deployable.&lt;/li&gt;
&lt;li&gt;To work on something new, create a descriptively named branch off of master.&lt;/li&gt;
&lt;li&gt;Commit to that branch locally and regularly push your work to the same named branch on the server.&lt;/li&gt;
&lt;li&gt;When you need feedback or help, or you think the branch is ready for merging, open a pull request.&lt;/li&gt;
&lt;li&gt;After someone else has reviewed and signed off on the feature, you can merge it into master.&lt;/li&gt;
&lt;li&gt;Once it is merged and pushed to ‘master’, you can and should deploy immediately.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SW" scheme="http://wanlizhu.github.io/categories/SW/"/>
    
    
      <category term="Git" scheme="http://wanlizhu.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
